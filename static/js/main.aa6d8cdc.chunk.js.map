{"version":3,"sources":["store/types.js","store/reducers.js","store/index.js","components/Card/Card.component.jsx","components/CardList/CardList.component.jsx","components/SearchBox/SearchBox.component.jsx","components/Scroll/Scroll.component.jsx","components/ErrorBoundry/ErrorBoundry.component.jsx","components/App/App.js","store/actions.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","searchField","robotsList","isPending","error","combineReducers","robots","state","action","type","TYPES","payload","logger","createLogger","store","createStore","reducers","applyMiddleware","thunk","Card","name","email","id","className","src","alt","CardList","map","robot","index","key","SearchBox","onChange","Scroll","children","ErrorBoundry","hasError","info","this","setState","props","React","Component","connect","setSearchField","text","requestRobots","dispatch","a","axios","get","data","useState","filteredRobots","setFilteredRobots","useEffect","onSearchChange","debounce","value","filter","toLocaleLowerCase","includes","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.aa6d8cdc.chunk.js","sourcesContent":["export default {\n  CHANGE_SEARCH_FIELD: \"CHANGE_SEARCH_FIELD\",\n  REQUEST_ROBOTS_PENDING: \"REQUEST_ROBOTS_PENDING\",\n  REQUEST_ROBOTS_SUCCESS: \"REQUEST_ROBOTS_SUCCESS\",\n  REQUEST_ROBOTS_FAILED: \"REQUEST_ROBOTS_FAILED\",\n};\n","import { combineReducers } from \"redux\";\n\nimport TYPES from \"./types\";\n\nconst INITIAL_STATE = {\n  searchField: \"\",\n  robotsList: [],\n  isPending: false,\n  error: null,\n};\n\nexport const robots = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case TYPES.CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    case TYPES.REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case TYPES.REQUEST_ROBOTS_SUCCESS:\n      return { ...state, isPending: false, robotsList: action.payload };\n    case TYPES.REQUEST_ROBOTS_FAILED:\n      return { ...state, isPending: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  robots,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\n\nconst logger = createLogger();\nconst store = createStore(reducers, applyMiddleware(thunk, logger));\n\nexport default store;\n","import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"components/Card\";\n\nconst CardList = ({ robots }) => {\n  // if (true) {\n  //   throw new Error(\"nooooo!\");\n  // }\n\n  return robots.map((robot, index) => <Card key={index} {...robot} />);\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ onChange }) => (\n  <div className=\"mb3\">\n    <input className=\"ba h3 ph3\" onChange={onChange} type=\"text\" />\n  </div>\n);\nexport default SearchBox;\n","import React from \"react\";\nimport \"./Scroll.styles.css\";\n\nconst Scroll = ({ children }) => {\n  return <div className=\"scroll\">{children}</div>;\n};\nexport default Scroll;\n","import React from \"react\";\n\n// this component will wotk only for production\nclass ErrorBoundry extends React.Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    return hasError ? (\n      <div>Ooooops!. Something went wrong!</div>\n    ) : (\n      <div>{children}</div>\n    );\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport debounce from \"lodash/debounce\";\nimport { setSearchField, requestRobots } from \"store/actions\";\nimport CardList from \"components/CardList\";\nimport SearchBox from \"components/SearchBox\";\nimport Scroll from \"components/Scroll\";\nimport ErrorBoundry from \"components/ErrorBoundry\";\n\nfunction App({ searchField, setSearchField, robotsList, requestRobots }) {\n  const [filteredRobots, setFilteredRobots] = useState([]);\n\n  useEffect(() => {\n    requestRobots();\n  }, [requestRobots]);\n\n  const onSearchChange = debounce((value) => {\n    setSearchField(value);\n  }, 300);\n\n  useEffect(() => {\n    const filteredRobots = robotsList.filter((robot) =>\n      robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n\n    setFilteredRobots(filteredRobots);\n  }, [searchField, robotsList]);\n\n  return (\n    <div className=\"tc\">\n      <h1 className=\"f1 lh-title mt4 mb3 white\">RoboFriends</h1>\n      <SearchBox onChange={(e) => onSearchChange(e.target.value)} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ robots: { searchField, robotsList } }) => ({\n  searchField,\n  robotsList,\n});\n\nexport default connect(mapStateToProps, {\n  setSearchField,\n  requestRobots,\n})(App);\n","import axios from \"axios\";\nimport TYPES from \"./types\";\n\nexport const setSearchField = (text) => ({\n  type: TYPES.CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => async (dispatch) => {\n  dispatch({ type: TYPES.REQUEST_ROBOTS_PENDING });\n\n  try {\n    const { data } = await axios.get(\n      \"https://jsonplaceholder.typicode.com/users\"\n    );\n    dispatch({ type: TYPES.REQUEST_ROBOTS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: TYPES.REQUEST_ROBOTS_FAILED, payload: error });\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"index.css\";\nimport \"tachyons\";\nimport store from \"store\";\nimport App from \"components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}