{"version":3,"sources":["components/Card/Card.component.jsx","components/CardList/CardList.component.jsx","components/SearchBox/SearchBox.component.jsx","components/Scroll/Scroll.component.jsx","components/ErrorBoundry/ErrorBoundry.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","robot","index","key","SearchBox","onChange","type","Scroll","children","ErrorBoundry","state","hasError","error","info","this","setState","props","React","Component","App","useState","setRobots","filteredRobots","setFilteredRobots","search","setSearch","fetchRobots","a","axios","get","data","console","useEffect","onSearchChange","debounce","value","filter","toLocaleLowerCase","includes","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oTAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACE,4BAAKL,GACL,2BAAIC,MCGGK,EARE,SAAC,GAKhB,OAL+B,EAAbC,OAKJC,KAAI,SAACC,EAAOC,GAAR,OAAkB,kBAAC,EAAD,eAAMC,IAAKD,GAAWD,QCD7CG,EALG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,yBAAKV,UAAU,OACb,2BAAOA,UAAU,YAAYU,SAAUA,EAAUC,KAAK,WCE3CC,G,MAHA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OAAO,yBAAKb,UAAU,UAAUa,K,gCCoBnBC,E,4MApBbC,MAAQ,CACNC,UAAU,G,gEAGMC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAGlB,IACAA,EAAaG,KAAKJ,MAAlBC,SACAH,EAAaM,KAAKE,MAAlBR,SAER,OAAOG,EACL,gEAEA,6BAAMH,O,GAhBeS,IAAMC,WCkDlBC,MA7Cf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNrB,EADM,KACEsB,EADF,OAE+BD,mBAAS,IAFxC,mBAENE,EAFM,KAEUC,EAFV,OAGeH,mBAAS,IAHxB,mBAGNI,EAHM,KAGEC,EAHF,KAKPC,EAAW,uCAAG,8BAAAC,EAAA,+EAEOC,IAAMC,IAC3B,8CAHc,gBAERC,EAFQ,EAERA,KAGRT,EAAUS,GALM,gDAOhBC,QAAQnB,MAAR,MAPgB,yDAAH,qDAWjBoB,qBAAU,WACRN,MACC,IAEH,IAAMO,EAAiBC,KAAS,SAACC,GAC/BV,EAAUU,KACT,KAUH,OARAH,qBAAU,WACR,IAAMV,EAAiBvB,EAAOqC,QAAO,SAACnC,GAAD,OACnCA,EAAMT,KAAK6C,oBAAoBC,SAASd,EAAOa,wBAGjDd,EAAkBD,KACjB,CAACE,EAAQzB,IAGV,yBAAKJ,UAAU,MACb,wBAAIA,UAAU,6BAAd,eACA,kBAAC,EAAD,CAAWU,SAAU,SAACkC,GAAD,OAAON,EAAeM,EAAEC,OAAOL,UACpD,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpC,OAAQuB,QClCRmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLmB,QAAQnB,MAAMA,EAAM8C,c","file":"static/js/main.8671dbf6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"components/Card\";\n\nconst CardList = ({ robots }) => {\n  // if (true) {\n  //   throw new Error(\"nooooo!\");\n  // }\n\n  return robots.map((robot, index) => <Card key={index} {...robot} />);\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ onChange }) => (\n  <div className=\"mb3\">\n    <input className=\"ba h3 ph3\" onChange={onChange} type=\"text\" />\n  </div>\n);\nexport default SearchBox;\n","import React from \"react\";\nimport \"./Scroll.styles.css\";\n\nconst Scroll = ({ children }) => {\n  return <div className=\"scroll\">{children}</div>;\n};\nexport default Scroll;\n","import React from \"react\";\n\n// this component will wotk only for production\nclass ErrorBoundry extends React.Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    return hasError ? (\n      <div>Ooooops!. Something went wrong!</div>\n    ) : (\n      <div>{children}</div>\n    );\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { useState, useEffect } from \"react\";\nimport debounce from \"lodash/debounce\";\nimport axios from \"axios\";\nimport CardList from \"components/CardList\";\nimport SearchBox from \"components/SearchBox\";\nimport Scroll from \"components/Scroll\";\nimport ErrorBoundry from \"components/ErrorBoundry\";\n\nfunction App() {\n  const [robots, setRobots] = useState([]);\n  const [filteredRobots, setFilteredRobots] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  const fetchRobots = async () => {\n    try {\n      const { data } = await axios.get(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      setRobots(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchRobots();\n  }, []);\n\n  const onSearchChange = debounce((value) => {\n    setSearch(value);\n  }, 300);\n\n  useEffect(() => {\n    const filteredRobots = robots.filter((robot) =>\n      robot.name.toLocaleLowerCase().includes(search.toLocaleLowerCase())\n    );\n\n    setFilteredRobots(filteredRobots);\n  }, [search, robots]);\n\n  return (\n    <div className=\"tc\">\n      <h1 className=\"f1 lh-title mt4 mb3 white\">RoboFriends</h1>\n      <SearchBox onChange={(e) => onSearchChange(e.target.value)} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"index.css\";\nimport \"tachyons\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}